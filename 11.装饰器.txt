装饰器：本质是函数，（装饰其他函数）就是为其他函数添加附件功能

原则：1、不能修改被装饰的函数的源代码
         2、不能修改被装饰的函数的调用方式

实现装饰器知识储备
1、函数即“变量”
2、高阶函数
    a、把一个函数名当做实参传给另外一个函数（在不修改被装饰函数源代码的情况下为其添加功能）
    b、返回值中包含函数名（不修改函数的调用方式）
3、嵌套函数

高阶函数+嵌套函数=》装饰器

语法糖

装饰器示例

import time

def timer(func): #time(test1)  func=test1
    def deco(*args,**kwargs):
        start_time = time.time()
        func(*args,**kwargs) # test1()
        stop_time = time.time()
        print('the func time is %s' % (stop_time - start_time))
    return deco
@timer  #test1 = timer(test1)
def test1():
    time.sleep(1)
    print('in the test1')

@timer  #test2 = timer(test2) = deco
def test2(name):
    time.sleep(1)
    print('in the test2',name)

test1()
test2("guo")
